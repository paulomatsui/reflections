Question 1
"What happens when you initialize a repository? Why do you need to do it?"
—————

Whn you initialize a repository based on an existing directory, Git creates an  invisible meta file .git inside this folder to track the directory you were in when you gave the <<git init>> command.
I've done it so now the directory *is* a proper repository and can be version-controlled by Git.



Question 2
"How is the staging area different from the working directory and the repository? What value do you think it offers?"
—————

Staging area seems like a intermediary limbo where stuff are prepared to get commited. Different from the working directory, the staging area is being watched by Git.
The staging area has the same value as an e-mail draft - a place where you can put stuff before commiting it definitely.



Question 3
"How can you use the staging area to make sure you have one commit per logical change?"
—————

Using git diff --staged to compare the Staging Area version to the most recent Commit on Git.



Question 4
"What are some situations when branches would be helpful in keeping your history organized? How would branches help?"
—————

When trying some experiments or alternatives in the code - without disturbing or destroying the original history (Master) - branching would be very helpful. This is a non-destructive editing. Pretty handy.



Question 5
"How do the diagrams help you visualize the branch structure?"
—————

Visualizing a tree structure (instead of only abstracting it in your head) is pretty much easier - and helps to understand the physical shape (master history line and its branches) of a project on a Git history.



Question 6
"What are the pros and cons of Git’s automatic merging vs. always doing merges manually?"
—————

Auto would be great. But sometimes we're forced to read the fine print, understand the code and try to resolve the conflicts by hand